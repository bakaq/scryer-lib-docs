searchState.loadedDescShard("dashu_int", 0, "A big integer library with good performance.\nThe primitive integer type that has exactly double the …\nAn signed arbitrary precision integer.\nIBig with value -1\nIBig with value 1\nUBig with value 1\nAn enum representing the sign of a number\nAn unsigned arbitrary precision integer.\nThe primitive integer type used to construct the big …\nIBig with value 0\nUBig with value 0\nRegard the number as a IBig number and return a reference …\nGet the raw representation in Words.\nGet the raw representation in Words.\nClear the <code>n</code>-th bit, <code>n</code> starts from 0.\nClear the high bits from <code>n+1</code>-th bit.\nCount the 1 bits in the integer\nCount the 0 bits in the integer after the leading bit 1.\nCompute the cubic of the number (<code>self * self * self</code>).\nCompute the cubic of the number (<code>self * self * self</code>).\nDefault value: 0.\nDefault value: 0.\nPrepared divisor types for fast division\nInteger formatting.\nReturns the argument unchanged.\nConvert boolean value to Sign, returns Negative for <code>true</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from big-endian bytes.\nCreate a UBig from a DoubleWord.\nConstruct from little-endian bytes.\nCreate an IBig from the Sign and UBig magnitude\nCreate an IBig in a const context.\nConvert a string in a given base to IBig.\nConvert a string in a given base to UBig.\nConvert a string with an optional radix prefix to IBig, …\nConvert a string with an optional radix prefix to UBig, …\nConvert a string with an optional radix prefix to IBig, …\nConvert a string with an optional radix prefix to UBig, …\nCreate a UBig from a single Word.\nConvert a sequence of Words into a UBig\nCalculate the (truncated) logarithm of the magnitude of …\nCalculate the (truncated) logarithm of the UBig\nRepresentation in a given radix.\nRepresentation in a given radix.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the IBig into its Sign and UBig magnitude\nDetermine whether the integer is perfectly divisible by …\nDetermine whether the integer is perfectly divisible by …\nA const version of IBig::is_multiple_of, but only accepts …\nA const version of UBig::is_multiple_of, but only accepts …\nCheck whether the number is 1\nCheck whether the value is 1\nCheck whether the number is 0\nCheck whether the value is 0\nModular arithmetic.\nCalculate the nth-root of the integer rounding towards zero\nCalculate the nth-root of the integer rounding towards zero\nRe-exported relevant operator traits from <code>dashu-base</code>\nRaises self to the power of <code>exp</code>.\nRaises self to the power of <code>exp</code>.\nDivide out all multiples of the factor from the integer, …\nSet the <code>n</code>-th bit, n starts from 0.\nGet the sign of the number. Zero value has a positive sign.\nA number representing the sign of <code>self</code>.\nSplit this integer into low bits and high bits.\nCompute the square of the number (<code>self * self</code>).\nCalculate the square of the number (<code>x * x</code>).\nReturn big-endian bytes.\nConvert to f32.\nConvert to f32.\nConvert to f64.\nConvert to f64.\nReturn little-endian bytes.\nReturns the number of trailing ones in the two’s …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the two’s …\nReturns the number of trailing zeros in the binary …\nAn UBig with some pre-computed fields to support faster …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an element of the modulo ring from another type.\nRepresentation of a UBig or IBig in any radix between …\nMaximum supported radix.\nMinimum supported radix.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for types that can be converted into an …\nModular arithmetic.\nCalculate 2*target mod m in reduced form\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMultiplicative inverse.\nGet the modulus of the ring that this element belongs to.\nExponentiation.\nGet the residue in range <code>0..n</code> in an n-element ring.\nCalculate target^2 mod m in reduced form\nAbsolute value.\nBit query for integers\nCompute the cubic root of the number.\nComputer the floored cubic root of the number and return …\nCompute Euclidean quotient.\nCompute quotient and remainder at the same time.\nCompute quotient inplace and return remainder at the same …\nCompute Euclidean quotient and remainder at the same time.\nFast estimation of the binary logarithm of a number\nCompute the greatest common divisor between self and the …\nCompute the greatest common divisor.\nFunctions related to the power of two.\nCompute Euclidean remainder.\nCompute the square root of the number.\nComputer the floored square root of the number and return …\nUnsigned absolute value.\nReturns true if the <code>n</code>-th bit is set in its two’s …\nEffective bit length of the binary representation.\nCompute the greatest common divisor between the two …\nCalculate the greatest common divisor between the two …\nTest if self is a power of two (<code>2^k</code>)\nEstimate the bounds of the binary logarithm.\nEstimate the value of the binary logarithm. It’s …\nGet the smallest power of two greater than or equal to …")