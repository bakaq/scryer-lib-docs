searchState.loadedDescShard("scryer_prolog", 0, "A free software ISO Prolog system.\nA Prolog atom.\nA Prolog compound term.\nAn exception leaf answer.\nA <code>false</code> leaf answer.\nA float.\nAn arbitrary precision integer.\nRepresents a leaf answer from a query.\nA leaf answer with bindings and residual goals.\nA Prolog list.\nAn instance of Scryer Prolog.\nDescribes how a <code>Machine</code> will be configured.\nRepresents a Prolog term.\nAn iterator though the leaf answers of a query.\nAn arbitrary precision rational.\nDescribes how the streams of a <code>Machine</code> will be handled.\nA Prolog string.\nA <code>true</code> leaf answer.\nA Prolog variable.\nCreates an atom term.\nCreates a compound term.\nCreates a conjunction, giving the atom <code>true</code> if empty.\nConsults a module into the <code>Machine</code> from a string.\nReturns a static string slice to the default toplevel\nCreates a disjunction, giving the atom <code>false</code> if empty.\nTrue if leaf answer failed.\nTrue if the query fails.\nCreates a float term.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current inference count.\nBinds the output stream to a memory buffer, and the error …\nCreates an integer term.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a list term.\nLoads a module into the <code>Machine</code> from a string.\nTrue if leaf answer may have succeeded.\nTrue if the query maybe succeeded.\nCreates a default configuration.\nCreates a new <code>Machine</code> from a <code>MachineConfig</code>.\nCreates a new <code>Machine</code> configured for use as a library.\nCreates a rational term.\nThe entry point for the Scryer Prolog CLI.\nRuns a query.\nBinds the input, output and error streams to stdin, stdout …\nCreates a string term.\nFor use in tests.\nFor use in tests.\nCreates a conjunction, giving <code>None</code> if empty.\nCreates a disjunction, giving <code>None</code> if empty.\nCreates a variable.\nUses the given <code>crate::StreamConfig</code> in this configuration.\nFor use in tests.\nUses the given toplevel in this configuration.\nThe bindings of variables in the query.\nResidual goals.")