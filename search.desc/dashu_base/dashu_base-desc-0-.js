searchState.loadedDescShard("dashu_base", 0, "This crate contains general trait definitions and some …\nTrait definitions for approximated values\nTrait definitions for bitwise operations.\nError types.\nTrait definitions for math operations\nTrait definitions for operations related to rings …\nTrait definitions for sign related operations.\nSome useful utility functions that are also used …\nRepresent an calculation result with a possible error.\nThe result is exact, contains the result value\nThe result is inexact, contains the result value and error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the value of the calculation regardless of error\nGet a reference to the calculation result\nBit query for integers\nSupport encoding and decoding of floats into (mantissa, …\nFunctions related to the power of two.\nReturns true if the <code>n</code>-th bit is set in its two’s …\nEffective bit length of the binary representation.\nConvert a float number <code>mantissa * 2^exponent</code> into …\nConvert <code>(mantissa, exponent)</code> to <code>mantissa * 2^exponent</code> …\nTest if self is a power of two (<code>2^k</code>)\nGet the smallest power of two greater than or equal to …\nNumber out of bounds.\nThe radices of different components of the number are …\nInvalid digit for a given radix.\nThe conversion will cause a loss of precision\nNo digits in the string.\nThe number is not in the representation range\nError parsing a number.\nThe radix is not supported.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the cubic root of the number.\nFast estimation of the binary logarithm of a number\nCompute the multiplicative inverse (aka. reciprocal) of …\nCompute the square root of the number.\nEstimate the bounds of the binary logarithm.\nEstimate the value of the binary logarithm. It’s …\nComputer the floored cubic root of the number and return …\nCompute Euclidean quotient.\nCompute quotient and remainder at the same time.\nCompute quotient inplace and return remainder at the same …\nCompute Euclidean quotient and remainder at the same time.\nCompute the greatest common divisor between self and the …\nCompute the greatest common divisor.\nCompute Euclidean remainder.\nComputer the floored square root of the number and return …\nCompute the greatest common divisor between the two …\nCalculate the greatest common divisor between the two …\nAbsolute value.\nCheck whether the magnitude of this number is equal the …\nCompare the magnitude of this number to the magnitude of …\nAn enum representing the sign of a number\nThis trait marks the number is signed.\nUnsigned absolute value.\nReturns the argument unchanged.\nConvert boolean value to Sign, returns Negative for <code>true</code>\nCalls <code>U::from(self)</code>.\nImplementation of the nightly f32::next_down()\nImplementation of the nightly f32::next_up()")