searchState.loadedDescShard("dashu_float", 0, "A big float library supporting arbitrary precision, …\nThe base of the representation. It’s exposed as an IBig …\nThe context containing runtime information for the …\nMulti-precision float number with decimal exponent and …\nAn arbitrary precision floating point number with …\nFBig instance representing the positive infinity (+∞)\nFBig instance representing the negative infinity (-∞)\nFBig with value -1 and unlimited precision\nFBig with value 1 and unlimited precision\nUnderlying representation of an arbitrary precision …\nFBig with value 0 and unlimited precision\nAdd two floating point numbers under this context.\nReturns the smallest integer greater than or equal to self.\nGet the context associated with the float number\nConvert an IBig instance to a FBig instance with precision …\nCompute the cubic of this number (<code>self * self * self</code>)\nCalculate the cubic of the floating point number under …\nDefault value: 0.\nGet the number of the significant digits in the float …\nGet the number of digits (under base <code>B</code>) in the significand.\nFast under-estimation of digits\nFast over-estimation of digits\nDivide two floating point numbers under this context.\nCalculate the exponential function (<code>eˣ</code>) on the floating …\nCalculate the exponential function (<code>eˣ</code>) on the floating …\nCalculate the exponential minus one function (<code>eˣ-1</code>) on …\nCalculate the exponential minus one function (<code>eˣ-1</code>) on …\nGet the exponent of the representation\nReturns the largest integer less than or equal to self.\nGet the fractional part of the float\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert raw parts (significand, exponent) into a float …\nConvert raw parts (significand, exponent) into a float …\nCreate a FBig instance from Repr and Context.\nCreate a FBig instance from Repr. Due to the limitation of …\nConvert a string in the native base (i.e. radix <code>B</code>) to FBig.\nConvert a string in the native base (i.e. radix <code>B</code>) to Repr.\nCreate a Repr instance representing the (positive) infinity\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the float number into raw <code>(signficand, exponent)</code> …\nGet the underlying numeric representation\nCompute the multiplicative inverse of an <code>FBig</code>\nDetermine if the Repr represents a finite number\nDetermine if the Repr represents the (±)infinity\nDetermine if the number can be regarded as an integer.\nDetermine if the Repr represents one\nDetermine if the Repr represents zero\nCalculate the natural logarithm function (<code>log(x)</code>) on the …\nCalculate the natural logarithm function (<code>log(x)</code>) on the …\nCalculate the natural logarithm function (<code>log(x+1)</code>) on the …\nCalculate the natural logarithm function (<code>log(x+1)</code>) on the …\nCreate a float operation context with the higher precision …\nMultiply two floating point numbers under this context.\nCreate a Repr instance representing the negative infinity\nCreate a Repr instance representing value negative one\nCreate a Repr from the significand and exponent. This …\nCreate a float operation context with the given precision …\nCreate a Repr instance representing value one\nRe-exported relevant operator traits from <code>dashu-base</code>\nRaise the floating point number to an floating point power.\nRaise the floating point number to an floating point power …\nRaise the floating point number to an integer power.\nRaise the floating point number to an integer power under …\nGet the maximum precision set for the float number.\nGet the precision limited from the context\nCalculate the remainder of <code>⌈lhs / rhs⌋</code>.\nGet a reference to the underlying numeric representation\nTraits and implementations for rounding during operations.\nReturns the integer nearest to self.\nGet the sign of the number. Zero value has a positive sign.\nGet the sign of the number\nGet the significand of the representation\nA number representing the sign of <code>self</code>.\nSplit the rational number into integral and fractional …\nCompute the square of this number (<code>self * self</code>)\nCalculate the square of the floating point number under …\nCalculate the square root of the floating point number.\nSubtract two floating point numbers under this context.\nConvert the float number to base 2 (with binary exponents) …\nConvert the float number to base 10 (with decimal …\nConvert the float number to f32 with the rounding mode …\nConvert the float number representation to a f32 with the …\nConvert the float number to f64 with HalfEven rounding …\nConvert the float number representation to a f64 with the …\nConvert the float number to integer with the given …\nConvert the float number representation to a IBig.\nGet the integral part of the float\nReturn the value of the least significant digit of the …\nExplicitly change the base of the float number.\nExplicitly change the base of the float number with given …\nExplicitly change the precision of the float number.\nExplicitly change the rounding mode of the number.\nCreate a Repr instance representing value zero\nAbsolute value.\nCompute the cubic root of the number.\nCompute Euclidean quotient.\nCompute Euclidean quotient and remainder at the same time.\nFast estimation of the binary logarithm of a number\nCompute Euclidean remainder.\nCompute the square root of the number.\nEstimate the bounds of the binary logarithm.\nEstimate the value of the binary logarithm. It’s …\nAdd one\nA trait providing the function to retrieve the error …\nThe result is exact, contains the result value\nThe result is inexact, contains the result value and error\nNo adjustment\nThe rounding operation that rounds to an opposite direction\nA trait describing the rounding strategy\nA type representing float operation result\nThe adjustment of a rounding operation\nSubtract one\nGiven a floating point number <code>f</code>, the output (L, R, incl_L, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilt-in rounding modes of the floating numbers.\nCalculate the rounding of the number (integer + fract / …\nCalculate the rounding of the number (integer + rem), …\nCalculate the rounding of the number (integer + numerator …\nRound away from 0\nRound toward -∞\nRound to the nearest value, ties away from zero\nRound to the nearest value, ties are rounded to an even …\nRound toward +∞\nRound toward 0 (default mode for binary float)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")