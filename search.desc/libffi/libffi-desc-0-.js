searchState.loadedDescShard("libffi", 0, "Rust bindings for libffi.\nPerforms a dynamic call to a C function.\nHigh layer providing automatic marshalling of Rust closures\nA low-level wrapping of libffi, this layer makes no …\nMiddle layer providing a somewhat safer (but still quite …\nRaw definitions imported from the C library (via bindgen).\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nCIF and closure types organized by function arity.\nSimple dynamic calls.\nRepresentations of C types for the high layer.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nThe type of function called from an immutable, typed …\nThe type of function called from a mutable, typed closure.\nThe type of function called from a one-shot, typed closure.\nA typed CIF, which statically tracks argument and result …\nAn immutable, typed closure with the given argument and …\nA mutable, typed closure with the given argument and …\nA one-shot, typed closure with the given argument and …\nA lifetime carrying wrapper type for <code>fn</code> pointers.\nCall the wrapped <code>fn</code> pointer.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nGets the C code pointer that is used to invoke the closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new statically-typed CIF with the given argument …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a Rust …\nConstructs a typed closure callable from C from a CIF …\nConstructs a typed closure callable from C from a CIF …\nConstructs a one-shot closure callable from C from a CIF …\nCreates a new statically-typed CIF by reifying the …\nSets the CIF to use the given calling convention.\nEncapsulates an argument with its type information.\nConstructs an <code>Arg</code> for passing to <code>call</code>.\nPerforms a dynamic call to a C function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWraps an argument reference for passing to <code>call</code>.\nTypes that we can automatically marshall to/from C.\nThe low-level libffi library implicitly extends small …\nRepresents a C type statically associated with a Rust type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the underlying representation as used by the <code>middle</code> …\nCreates or retrieves a <code>Type&lt;T&gt;</code> for any type <code>T: CType</code>.\nGiven a bad or unsupported ABI.\nThe type of function called by a closure.\nThe type of function called by a mutable closure.\nWraps a function pointer of unknown type.\nContains the error value\nThe two kinds of errors reported by libffi.\nContains the success value\nThe callback type expected by <code>raw::ffi_prep_closure_loc</code>.\nThe <code>std::result::Result</code> type specialized for libffi <code>Error</code>s.\nGiven a bad or unsupported type representation.\nGets the code pointer typed as a C function pointer.\nGets the code pointer typed as a <code>void*</code>.\nGets the code pointer typed as a <code>const void*</code>.\nGets the code pointer typed as a “safe” C function …\nCalls a C function as specified by a CIF.\nAllocates a closure.\nFrees a closure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes a code pointer from a function pointer.\nInitializes a code pointer from a void pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitalizes a CIF (Call Interface) with the given ABI and …\nInitalizes a CIF (Call Interface) for a varargs function.\nInitializes a closure with a callback function and …\nInitializes a mutable closure with a callback function and …\nType tags used in constructing and inspecting <code>ffi_type</code>s.\nRe-exports the <code>ffi_type</code> objects used to describe the types …\nIndicates a structure type.\nContains an untyped pointer to a function argument.\nProvides a builder-style API for constructing CIFs and …\nThe type of callback invoked by a <code>ClosureOnce</code>.\nDescribes the calling convention and types for calling a …\nRepresents a closure callable from C.\nA closure that owns needs-drop data.\nRepresents a single C type.\nSets the calling convention.\nCoerces an argument reference into the <code>Arg</code> type.\nAdds a type to the argument type list.\nAdds several types to the argument type list.\nGets a raw pointer to the underlying <code>low::ffi_type</code>.\nGets a raw pointer to the underlying <code>low::ffi_cif</code>.\nReturns the C <code>int</code> type.\nReturns the C <code>long</code> type.\nReturns the C <code>longlong</code> type.\nReturns the C <code>signed char</code> type.\nReturns the C <code>short</code> type.\nReturns the C <code>unsigned char</code> type.\nReturns the C <code>unsigned int</code> type.\nReturns the C <code>unsigned long</code> type.\nReturns the C <code>unsigned longlong</code> type.\nReturns the C <code>unsigned short</code> type.\nCalls a function with the given arguments.\nObtains the callable code pointer for a closure.\nObtains the callable code pointer for a closure.\nReturns the C <code>float</code> (32-bit floating point) type.\nReturns the C <code>double</code> (64-bit floating point) type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the signed 16-bit numeric type.\nReturns the signed 32-bit numeric type.\nReturns the signed 64-bit numeric type.\nReturns the signed 8-bit numeric type.\nTransmutes the callable code pointer for a closure to a …\nTransmutes the callable code pointer for a closure to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a CIF.\nBuilds an immutable closure.\nBuilds a mutable closure.\nBuilds a one-shot closure.\nReturns the C equivalent of Rust <code>isize</code> (<code>i64</code>).\nReturns the C <code>long double</code> (extended-precision floating …\nConstructs a <code>Builder</code>.\nCoerces an argument reference into the <code>Arg</code> type.\nCreates a new CIF for the given argument and result types.\nCreates a new closure with immutable userdata.\nCreates a new closure with owned userdata.\nCreates a new closure with mutable userdata.\nReturns the C <code>void*</code> type, for passing any kind of pointer.\nSets the result type.\nSets the CIF to use the given calling convention.\nConstructs a structure type whose fields have the given …\nReturns the unsigned 16-bit numeric type.\nReturns the unsigned 32-bit numeric type.\nReturns the unsigned 64-bit numeric type.\nReturns the unsigned 8-bit numeric type.\nReturns the C equivalent of Rust <code>usize</code> (<code>u64</code>).\nReturns the representation of the C <code>void</code> type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")